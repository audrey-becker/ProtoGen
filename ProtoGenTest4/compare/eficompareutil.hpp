// eficompareutil.hpp was generated by ProtoGen version 3.1.d

#ifndef _EFICOMPAREUTIL_HPP
#define _EFICOMPAREUTIL_HPP

// Language target is C++

/*!
 * \file
 */

#include "eficomms.h"
#include <string>

//! Compare two efiDate_t and generate a report
std::string compareefiDate_t(const std::string& prename, const efiDate_t* user1, const efiDate_t* user2);

//! Compare two efiDateTime_t and generate a report
std::string compareefiDateTime_t(const std::string& prename, const efiDateTime_t* user1, const efiDateTime_t* user2);

//! Compare two efiCrankSense_t and generate a report
std::string compareefiCrankSense_t(const std::string& prename, const efiCrankSense_t* user1, const efiCrankSense_t* user2);

//! Compare two efiTable1D_t and generate a report
std::string compareefiTable1D_t(const std::string& prename, const efiTable1D_t* user1, const efiTable1D_t* user2);

//! Compare two efiEngineWear packets and generate a report
std::string compareefiEngineWearPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiEngineWear_t and generate a report
std::string compareefiEngineWear_t(const std::string& prename, const efiEngineWear_t* user1, const efiEngineWear_t* user2);

//! Compare two efiMaintenanceItemStatus_t and generate a report
std::string compareefiMaintenanceItemStatus_t(const std::string& prename, const efiMaintenanceItemStatus_t* user1, const efiMaintenanceItemStatus_t* user2);

//! Compare two efiMaintenanceStatus packets and generate a report
std::string compareefiMaintenanceStatusPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiMaintenanceStatus_t and generate a report
std::string compareefiMaintenanceStatus_t(const std::string& prename, const efiMaintenanceStatus_t* user1, const efiMaintenanceStatus_t* user2);

//! Compare two efiLogEntry packets and generate a report
std::string compareefiLogEntryPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiLogEntry_t and generate a report
std::string compareefiLogEntry_t(const std::string& prename, const efiLogEntry_t* user1, const efiLogEntry_t* user2);

//! Compare two efiFile packets and generate a report
std::string compareefiFilePkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiFile_t and generate a report
std::string compareefiFile_t(const std::string& prename, const efiFile_t* user1, const efiFile_t* user2);

//! Compare two efiComment packets and generate a report
std::string compareefiCommentPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiComment_t and generate a report
std::string compareefiComment_t(const std::string& prename, const efiComment_t* user1, const efiComment_t* user2);

//! Compare two efiLockControl packets and generate a report
std::string compareefiLockControlPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiLockControl_t and generate a report
std::string compareefiLockControl_t(const std::string& prename, const efiLockControl_t* user1, const efiLockControl_t* user2);

//! Compare two efiConfigHash packets and generate a report
std::string compareefiConfigHashPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiConfigHash_t and generate a report
std::string compareefiConfigHash_t(const std::string& prename, const efiConfigHash_t* user1, const efiConfigHash_t* user2);

//! Compare two efiPumpConfiguration packets and generate a report
std::string compareefiPumpConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiPumpConfiguration_t and generate a report
std::string compareefiPumpConfiguration_t(const std::string& prename, const efiPumpConfiguration_t* user1, const efiPumpConfiguration_t* user2);

//! Compare two efiCANconfig_t and generate a report
std::string compareefiCANconfig_t(const std::string& prename, const efiCANconfig_t* user1, const efiCANconfig_t* user2);

//! Compare two efiCommConfiguration packets and generate a report
std::string compareefiCommConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiCommConfiguration_t and generate a report
std::string compareefiCommConfiguration_t(const std::string& prename, const efiCommConfiguration_t* user1, const efiCommConfiguration_t* user2);

//! Compare two efiSensorConfiguration packets and generate a report
std::string compareefiSensorConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiSensorConfiguration_t and generate a report
std::string compareefiSensorConfiguration_t(const std::string& prename, const efiSensorConfiguration_t* user1, const efiSensorConfiguration_t* user2);

//! Compare two efiThrottleConfiguration packets and generate a report
std::string compareefiThrottleConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiThrottleConfiguration_t and generate a report
std::string compareefiThrottleConfiguration_t(const std::string& prename, const efiThrottleConfiguration_t* user1, const efiThrottleConfiguration_t* user2);

//! Compare two efiCoolingConfiguration packets and generate a report
std::string compareefiCoolingConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiCoolingConfiguration_t and generate a report
std::string compareefiCoolingConfiguration_t(const std::string& prename, const efiCoolingConfiguration_t* user1, const efiCoolingConfiguration_t* user2);

//! Compare two efiEngineConfiguration packets and generate a report
std::string compareefiEngineConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiEngineConfiguration_t and generate a report
std::string compareefiEngineConfiguration_t(const std::string& prename, const efiEngineConfiguration_t* user1, const efiEngineConfiguration_t* user2);

//! Compare two efiInjectorConfiguration packets and generate a report
std::string compareefiInjectorConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiInjectorConfiguration_t and generate a report
std::string compareefiInjectorConfiguration_t(const std::string& prename, const efiInjectorConfiguration_t* user1, const efiInjectorConfiguration_t* user2);

//! Compare two efiRPMController packets and generate a report
std::string compareefiRPMControllerPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiRPMController_t and generate a report
std::string compareefiRPMController_t(const std::string& prename, const efiRPMController_t* user1, const efiRPMController_t* user2);

//! Compare two efiMaintenanceItemConfig_t and generate a report
std::string compareefiMaintenanceItemConfig_t(const std::string& prename, const efiMaintenanceItemConfig_t* user1, const efiMaintenanceItemConfig_t* user2);

//! Compare two efiMaintenanceConfiguration packets and generate a report
std::string compareefiMaintenanceConfigurationPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiMaintenanceConfiguration_t and generate a report
std::string compareefiMaintenanceConfiguration_t(const std::string& prename, const efiMaintenanceConfiguration_t* user1, const efiMaintenanceConfiguration_t* user2);

//! Compare two efiTable2D_1x packets and generate a report
std::string compareefiTable2D_1xPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiTable2D_1x_t and generate a report
std::string compareefiTable2D_1x_t(const std::string& prename, const efiTable2D_1x_t* user1, const efiTable2D_1x_t* user2);

//! Compare two efiTable2D packets and generate a report
std::string compareefiTable2DPkt(std::string prename, const efiPacket_t* pkt1, const efiPacket_t* pkt2);

//! Compare two efiTable2D_t and generate a report
std::string compareefiTable2D_t(const std::string& prename, const efiTable2D_t* user1, const efiTable2D_t* user2);

#endif // _EFICOMPAREUTIL_HPP
