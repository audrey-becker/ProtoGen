// scaledencode.h was generated by ProtoGen version 3.1.d

#ifndef _SCALEDENCODE_H
#define _SCALEDENCODE_H

// Language target is C, C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

/*!
 * \file
 * scaledencode routines place scaled numbers into a byte stream.
 *
 * scaledencode routines place scaled values into a big or little endian byte
 * stream. The values can be any legitimate type (double, float, uint32_t,
 * uint16_t, uint8_t, int32_t, int16_t, int8_t), and are encoded as either a
 * unsigned or signed integer from 1 to 8 bytes in length. Unsigned encodings
 * allow the caller to specify a minimum and a maximum value, with the only
 * limitation that the maximum value must be more than the minimum. Signed
 * encodings only allow the caller to specify a maximum value which gives
 * maximum absolute value that can be encoded.
 *
 * An example encoding would be: take a float that represents speed in meters
 * per second and encode it in two bytes from -200 to 200 meters per second.
 * In that example the encoding function would be:
 *
 * float32ScaledTo2SignedBeBytes(speed, bytestream, &index, 200);
 *
 * This would scale the speed according to (32767/200), and copy the resulting
 * two bytes to bytestream[index] as a signed 16 bit number in big endian
 * order. This would result in a velocity resolution of 0.006 m/s.
 *
 * Another example encoding is: take a double that represents altitude in
 * meters and encode it in three bytes from -1000 to 49000 meters:
 *
 * float64ScaledTo3UnsignedLeBytes(alt, bytestream, &index, -1000, 49000);
 *
 * This would transform the altitude according to (alt *(16777215/50000) + 1000)
 * and copy the resulting three bytes to bytestream[index] as an unsigned 24
 * bit number in little endian order. This would result in an altitude
 * resolution of 0.003 meters.
 * 
 * scaledencode does not include routines that increase the resolution of the
 * inmemory value. For example the function floatScaledTo5UnsignedBeBytes() does
 * not exist, because expanding a float to 5 bytes does not make any resolution
 * improvement over encoding it in 4 bytes. In general the encoded format
 * must be equal to or less than the number of bytes of the raw data.
 *
 * Code generation for this module was affected by these global flags:
 * 64-bit integers are supported.
 * Normal bitfields are supported, long bitfields are not.
 * Double precision floating points are supported.
 */

#define __STDC_CONSTANT_MACROS
#include <stdint.h>

#ifdef UINT64_MAX

//! Encode a double on a byte stream by floating point scaling to fit in 8 unsigned bytes in big endian order.
void float64ScaledTo8UnsignedBeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 8 unsigned bytes in little endian order.
void float64ScaledTo8UnsignedLeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 8 signed bytes in big endian order.
void float64ScaledTo8SignedBeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 8 signed bytes in little endian order.
void float64ScaledTo8SignedLeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 7 unsigned bytes in big endian order.
void float64ScaledTo7UnsignedBeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 7 unsigned bytes in little endian order.
void float64ScaledTo7UnsignedLeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 7 signed bytes in big endian order.
void float64ScaledTo7SignedBeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 7 signed bytes in little endian order.
void float64ScaledTo7SignedLeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 6 unsigned bytes in big endian order.
void float64ScaledTo6UnsignedBeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 6 unsigned bytes in little endian order.
void float64ScaledTo6UnsignedLeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 6 signed bytes in big endian order.
void float64ScaledTo6SignedBeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 6 signed bytes in little endian order.
void float64ScaledTo6SignedLeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 5 unsigned bytes in big endian order.
void float64ScaledTo5UnsignedBeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 5 unsigned bytes in little endian order.
void float64ScaledTo5UnsignedLeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 5 signed bytes in big endian order.
void float64ScaledTo5SignedBeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 5 signed bytes in little endian order.
void float64ScaledTo5SignedLeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Scale a double using floating point scaling to the base integer type used for bitfields.
unsigned int float64ScaledToBitfield(double value, double min, double scaler, int bits);

//! Encode a double on a byte stream by floating point scaling to fit in 4 unsigned bytes in big endian order.
void float64ScaledTo4UnsignedBeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 4 unsigned bytes in little endian order.
void float64ScaledTo4UnsignedLeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 4 signed bytes in big endian order.
void float64ScaledTo4SignedBeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 4 signed bytes in little endian order.
void float64ScaledTo4SignedLeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 3 unsigned bytes in big endian order.
void float64ScaledTo3UnsignedBeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 3 unsigned bytes in little endian order.
void float64ScaledTo3UnsignedLeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 3 signed bytes in big endian order.
void float64ScaledTo3SignedBeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 3 signed bytes in little endian order.
void float64ScaledTo3SignedLeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 2 unsigned bytes in big endian order.
void float64ScaledTo2UnsignedBeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 2 unsigned bytes in little endian order.
void float64ScaledTo2UnsignedLeBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 2 signed bytes in big endian order.
void float64ScaledTo2SignedBeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 2 signed bytes in little endian order.
void float64ScaledTo2SignedLeBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 1 unsigned byte.
void float64ScaledTo1UnsignedBytes(double value, uint8_t* bytes, int* index, double min, double scaler);

//! Encode a double on a byte stream by floating point scaling to fit in 1 signed byte.
void float64ScaledTo1SignedBytes(double value, uint8_t* bytes, int* index, double scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 8 unsigned bytes in big endian order.
void uint64ScaledTo8UnsignedBeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 8 unsigned bytes in little endian order.
void uint64ScaledTo8UnsignedLeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 8 signed bytes in big endian order.
void uint64ScaledTo8SignedBeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 8 signed bytes in little endian order.
void uint64ScaledTo8SignedLeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 7 unsigned bytes in big endian order.
void uint64ScaledTo7UnsignedBeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 7 unsigned bytes in little endian order.
void uint64ScaledTo7UnsignedLeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 7 signed bytes in big endian order.
void uint64ScaledTo7SignedBeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 7 signed bytes in little endian order.
void uint64ScaledTo7SignedLeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 6 unsigned bytes in big endian order.
void uint64ScaledTo6UnsignedBeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 6 unsigned bytes in little endian order.
void uint64ScaledTo6UnsignedLeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 6 signed bytes in big endian order.
void uint64ScaledTo6SignedBeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 6 signed bytes in little endian order.
void uint64ScaledTo6SignedLeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 5 unsigned bytes in big endian order.
void uint64ScaledTo5UnsignedBeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 5 unsigned bytes in little endian order.
void uint64ScaledTo5UnsignedLeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 5 signed bytes in big endian order.
void uint64ScaledTo5SignedBeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 5 signed bytes in little endian order.
void uint64ScaledTo5SignedLeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Scale a uint64_t using integer scaling to the base integer type used for bitfields.
unsigned int uint64ScaledToBitfield(uint64_t value, int64_t min, uint64_t scaler, int bits);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 4 unsigned bytes in big endian order.
void uint64ScaledTo4UnsignedBeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 4 unsigned bytes in little endian order.
void uint64ScaledTo4UnsignedLeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 4 signed bytes in big endian order.
void uint64ScaledTo4SignedBeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 4 signed bytes in little endian order.
void uint64ScaledTo4SignedLeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 3 unsigned bytes in big endian order.
void uint64ScaledTo3UnsignedBeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 3 unsigned bytes in little endian order.
void uint64ScaledTo3UnsignedLeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 3 signed bytes in big endian order.
void uint64ScaledTo3SignedBeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 3 signed bytes in little endian order.
void uint64ScaledTo3SignedLeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 2 unsigned bytes in big endian order.
void uint64ScaledTo2UnsignedBeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 2 unsigned bytes in little endian order.
void uint64ScaledTo2UnsignedLeBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 2 signed bytes in big endian order.
void uint64ScaledTo2SignedBeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 2 signed bytes in little endian order.
void uint64ScaledTo2SignedLeBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void uint64ScaledTo1UnsignedBytes(uint64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a uint64_t on a byte stream by integer scaling to fit in 1 signed byte.
void uint64ScaledTo1SignedBytes(uint64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 8 unsigned bytes in big endian order.
void int64ScaledTo8UnsignedBeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 8 unsigned bytes in little endian order.
void int64ScaledTo8UnsignedLeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 8 signed bytes in big endian order.
void int64ScaledTo8SignedBeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 8 signed bytes in little endian order.
void int64ScaledTo8SignedLeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 7 unsigned bytes in big endian order.
void int64ScaledTo7UnsignedBeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 7 unsigned bytes in little endian order.
void int64ScaledTo7UnsignedLeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 7 signed bytes in big endian order.
void int64ScaledTo7SignedBeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 7 signed bytes in little endian order.
void int64ScaledTo7SignedLeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 6 unsigned bytes in big endian order.
void int64ScaledTo6UnsignedBeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 6 unsigned bytes in little endian order.
void int64ScaledTo6UnsignedLeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 6 signed bytes in big endian order.
void int64ScaledTo6SignedBeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 6 signed bytes in little endian order.
void int64ScaledTo6SignedLeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 5 unsigned bytes in big endian order.
void int64ScaledTo5UnsignedBeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 5 unsigned bytes in little endian order.
void int64ScaledTo5UnsignedLeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 5 signed bytes in big endian order.
void int64ScaledTo5SignedBeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 5 signed bytes in little endian order.
void int64ScaledTo5SignedLeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Scale a int64_t using integer scaling to the base integer type used for bitfields.
unsigned int int64ScaledToBitfield(int64_t value, int64_t min, uint64_t scaler, int bits);

//! Encode a int64_t on a byte stream by integer scaling to fit in 4 unsigned bytes in big endian order.
void int64ScaledTo4UnsignedBeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 4 unsigned bytes in little endian order.
void int64ScaledTo4UnsignedLeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 4 signed bytes in big endian order.
void int64ScaledTo4SignedBeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 4 signed bytes in little endian order.
void int64ScaledTo4SignedLeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 3 unsigned bytes in big endian order.
void int64ScaledTo3UnsignedBeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 3 unsigned bytes in little endian order.
void int64ScaledTo3UnsignedLeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 3 signed bytes in big endian order.
void int64ScaledTo3SignedBeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 3 signed bytes in little endian order.
void int64ScaledTo3SignedLeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 2 unsigned bytes in big endian order.
void int64ScaledTo2UnsignedBeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 2 unsigned bytes in little endian order.
void int64ScaledTo2UnsignedLeBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 2 signed bytes in big endian order.
void int64ScaledTo2SignedBeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 2 signed bytes in little endian order.
void int64ScaledTo2SignedLeBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void int64ScaledTo1UnsignedBytes(int64_t value, uint8_t* bytes, int* index, int64_t min, uint64_t scaler);

//! Encode a int64_t on a byte stream by integer scaling to fit in 1 signed byte.
void int64ScaledTo1SignedBytes(int64_t value, uint8_t* bytes, int* index, uint64_t scaler);

#endif // UINT64_MAX

//! Scale a float using floating point scaling to the base integer type used for bitfields.
unsigned int float32ScaledToBitfield(float value, float min, float scaler, int bits);

//! Encode a float on a byte stream by floating point scaling to fit in 4 unsigned bytes in big endian order.
void float32ScaledTo4UnsignedBeBytes(float value, uint8_t* bytes, int* index, float min, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 4 unsigned bytes in little endian order.
void float32ScaledTo4UnsignedLeBytes(float value, uint8_t* bytes, int* index, float min, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 4 signed bytes in big endian order.
void float32ScaledTo4SignedBeBytes(float value, uint8_t* bytes, int* index, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 4 signed bytes in little endian order.
void float32ScaledTo4SignedLeBytes(float value, uint8_t* bytes, int* index, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 3 unsigned bytes in big endian order.
void float32ScaledTo3UnsignedBeBytes(float value, uint8_t* bytes, int* index, float min, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 3 unsigned bytes in little endian order.
void float32ScaledTo3UnsignedLeBytes(float value, uint8_t* bytes, int* index, float min, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 3 signed bytes in big endian order.
void float32ScaledTo3SignedBeBytes(float value, uint8_t* bytes, int* index, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 3 signed bytes in little endian order.
void float32ScaledTo3SignedLeBytes(float value, uint8_t* bytes, int* index, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 2 unsigned bytes in big endian order.
void float32ScaledTo2UnsignedBeBytes(float value, uint8_t* bytes, int* index, float min, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 2 unsigned bytes in little endian order.
void float32ScaledTo2UnsignedLeBytes(float value, uint8_t* bytes, int* index, float min, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 2 signed bytes in big endian order.
void float32ScaledTo2SignedBeBytes(float value, uint8_t* bytes, int* index, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 2 signed bytes in little endian order.
void float32ScaledTo2SignedLeBytes(float value, uint8_t* bytes, int* index, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 1 unsigned byte.
void float32ScaledTo1UnsignedBytes(float value, uint8_t* bytes, int* index, float min, float scaler);

//! Encode a float on a byte stream by floating point scaling to fit in 1 signed byte.
void float32ScaledTo1SignedBytes(float value, uint8_t* bytes, int* index, float scaler);

//! Scale a uint32_t using integer scaling to the base integer type used for bitfields.
unsigned int uint32ScaledToBitfield(uint32_t value, int32_t min, uint32_t scaler, int bits);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 4 unsigned bytes in big endian order.
void uint32ScaledTo4UnsignedBeBytes(uint32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 4 unsigned bytes in little endian order.
void uint32ScaledTo4UnsignedLeBytes(uint32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 4 signed bytes in big endian order.
void uint32ScaledTo4SignedBeBytes(uint32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 4 signed bytes in little endian order.
void uint32ScaledTo4SignedLeBytes(uint32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 3 unsigned bytes in big endian order.
void uint32ScaledTo3UnsignedBeBytes(uint32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 3 unsigned bytes in little endian order.
void uint32ScaledTo3UnsignedLeBytes(uint32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 3 signed bytes in big endian order.
void uint32ScaledTo3SignedBeBytes(uint32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 3 signed bytes in little endian order.
void uint32ScaledTo3SignedLeBytes(uint32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 2 unsigned bytes in big endian order.
void uint32ScaledTo2UnsignedBeBytes(uint32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 2 unsigned bytes in little endian order.
void uint32ScaledTo2UnsignedLeBytes(uint32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 2 signed bytes in big endian order.
void uint32ScaledTo2SignedBeBytes(uint32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 2 signed bytes in little endian order.
void uint32ScaledTo2SignedLeBytes(uint32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void uint32ScaledTo1UnsignedBytes(uint32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a uint32_t on a byte stream by integer scaling to fit in 1 signed byte.
void uint32ScaledTo1SignedBytes(uint32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Scale a int32_t using integer scaling to the base integer type used for bitfields.
unsigned int int32ScaledToBitfield(int32_t value, int32_t min, uint32_t scaler, int bits);

//! Encode a int32_t on a byte stream by integer scaling to fit in 4 unsigned bytes in big endian order.
void int32ScaledTo4UnsignedBeBytes(int32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 4 unsigned bytes in little endian order.
void int32ScaledTo4UnsignedLeBytes(int32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 4 signed bytes in big endian order.
void int32ScaledTo4SignedBeBytes(int32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 4 signed bytes in little endian order.
void int32ScaledTo4SignedLeBytes(int32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 3 unsigned bytes in big endian order.
void int32ScaledTo3UnsignedBeBytes(int32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 3 unsigned bytes in little endian order.
void int32ScaledTo3UnsignedLeBytes(int32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 3 signed bytes in big endian order.
void int32ScaledTo3SignedBeBytes(int32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 3 signed bytes in little endian order.
void int32ScaledTo3SignedLeBytes(int32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 2 unsigned bytes in big endian order.
void int32ScaledTo2UnsignedBeBytes(int32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 2 unsigned bytes in little endian order.
void int32ScaledTo2UnsignedLeBytes(int32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 2 signed bytes in big endian order.
void int32ScaledTo2SignedBeBytes(int32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 2 signed bytes in little endian order.
void int32ScaledTo2SignedLeBytes(int32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void int32ScaledTo1UnsignedBytes(int32_t value, uint8_t* bytes, int* index, int32_t min, uint32_t scaler);

//! Encode a int32_t on a byte stream by integer scaling to fit in 1 signed byte.
void int32ScaledTo1SignedBytes(int32_t value, uint8_t* bytes, int* index, uint32_t scaler);

//! Scale a uint16_t using integer scaling to the base integer type used for bitfields.
unsigned int uint16ScaledToBitfield(uint16_t value, int16_t min, uint16_t scaler, int bits);

//! Encode a uint16_t on a byte stream by integer scaling to fit in 2 unsigned bytes in big endian order.
void uint16ScaledTo2UnsignedBeBytes(uint16_t value, uint8_t* bytes, int* index, int16_t min, uint16_t scaler);

//! Encode a uint16_t on a byte stream by integer scaling to fit in 2 unsigned bytes in little endian order.
void uint16ScaledTo2UnsignedLeBytes(uint16_t value, uint8_t* bytes, int* index, int16_t min, uint16_t scaler);

//! Encode a uint16_t on a byte stream by integer scaling to fit in 2 signed bytes in big endian order.
void uint16ScaledTo2SignedBeBytes(uint16_t value, uint8_t* bytes, int* index, uint16_t scaler);

//! Encode a uint16_t on a byte stream by integer scaling to fit in 2 signed bytes in little endian order.
void uint16ScaledTo2SignedLeBytes(uint16_t value, uint8_t* bytes, int* index, uint16_t scaler);

//! Encode a uint16_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void uint16ScaledTo1UnsignedBytes(uint16_t value, uint8_t* bytes, int* index, int16_t min, uint16_t scaler);

//! Encode a uint16_t on a byte stream by integer scaling to fit in 1 signed byte.
void uint16ScaledTo1SignedBytes(uint16_t value, uint8_t* bytes, int* index, uint16_t scaler);

//! Scale a int16_t using integer scaling to the base integer type used for bitfields.
unsigned int int16ScaledToBitfield(int16_t value, int16_t min, uint16_t scaler, int bits);

//! Encode a int16_t on a byte stream by integer scaling to fit in 2 unsigned bytes in big endian order.
void int16ScaledTo2UnsignedBeBytes(int16_t value, uint8_t* bytes, int* index, int16_t min, uint16_t scaler);

//! Encode a int16_t on a byte stream by integer scaling to fit in 2 unsigned bytes in little endian order.
void int16ScaledTo2UnsignedLeBytes(int16_t value, uint8_t* bytes, int* index, int16_t min, uint16_t scaler);

//! Encode a int16_t on a byte stream by integer scaling to fit in 2 signed bytes in big endian order.
void int16ScaledTo2SignedBeBytes(int16_t value, uint8_t* bytes, int* index, uint16_t scaler);

//! Encode a int16_t on a byte stream by integer scaling to fit in 2 signed bytes in little endian order.
void int16ScaledTo2SignedLeBytes(int16_t value, uint8_t* bytes, int* index, uint16_t scaler);

//! Encode a int16_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void int16ScaledTo1UnsignedBytes(int16_t value, uint8_t* bytes, int* index, int16_t min, uint16_t scaler);

//! Encode a int16_t on a byte stream by integer scaling to fit in 1 signed byte.
void int16ScaledTo1SignedBytes(int16_t value, uint8_t* bytes, int* index, uint16_t scaler);

//! Scale a uint8_t using integer scaling to the base integer type used for bitfields.
unsigned int uint8ScaledToBitfield(uint8_t value, int8_t min, uint8_t scaler, int bits);

//! Encode a uint8_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void uint8ScaledTo1UnsignedBytes(uint8_t value, uint8_t* bytes, int* index, int8_t min, uint8_t scaler);

//! Encode a uint8_t on a byte stream by integer scaling to fit in 1 signed byte.
void uint8ScaledTo1SignedBytes(uint8_t value, uint8_t* bytes, int* index, uint8_t scaler);

//! Scale a int8_t using integer scaling to the base integer type used for bitfields.
unsigned int int8ScaledToBitfield(int8_t value, int8_t min, uint8_t scaler, int bits);

//! Encode a int8_t on a byte stream by integer scaling to fit in 1 unsigned byte.
void int8ScaledTo1UnsignedBytes(int8_t value, uint8_t* bytes, int* index, int8_t min, uint8_t scaler);

//! Encode a int8_t on a byte stream by integer scaling to fit in 1 signed byte.
void int8ScaledTo1SignedBytes(int8_t value, uint8_t* bytes, int* index, uint8_t scaler);

#ifdef __cplusplus
}
#endif
#endif // _SCALEDENCODE_H
